local function _0x0() local _0x1 = {}; _0x1.A = 0; _0x1.B = 19; _0x1.C = tick(); _0x1.D = {}; _0x1.E = {}; _0x1.F = {}; local function _0x2(_0x3, _0x4) local _0x5 = tick(); local _0x6, _0x7 = pcall(_0x4); local _0x8 = tick(); local _0x9 = (_0x8 - _0x5) * 1000; _0x1.F[_0x3] = _0x9; if _0x6 then _0x1.A = _0x1.A + 1; table.insert(_0x1.D, _0x3) else table.insert(_0x1.E, _0x3) end end _0x2("identifyexecutor", function() return identifyexecutor() end); _0x2("getgenv", function() return type(getgenv()) == "table" end); _0x2("getrenv", function() return type(getrenv()) == "table" end); _0x2("getfenv", function() return type(getfenv()) == "table" end); _0x2("getsenv", function() return getsenv(game) or true end); _0x2("getmenv", function() return getmenv() or true end); _0x2("getreg", function() return type(getreg()) == "table" end); _0x2("getgc", function() return type(getgc()) == "table" end); _0x2("getinstances", function() return type(getinstances()) == "table" end); _0x2("getnilinstances", function() return type(getnilinstances()) == "table" end); _0x2("getconnections", function() return type(getconnections(game:GetService("RunService").Heartbeat)) == "table" end); _0x2("firesignal", function() return firesignal(game:GetService("RunService").Heartbeat) or true end); _0x2("fireclickdetector", function() return fireclickdetector(Instance.new("ClickDetector")) or true end); _0x2("gethiddenproperty", function() return gethiddenproperty(game, "DataModel") or true end); _0x2("sethiddenproperty", function() return sethiddenproperty(game, "DataModel", game) or true end); _0x2("isnetworkowner", function() return type(isnetworkowner(game)) == "boolean" end); _0x2("getrawmetatable", function() return type(getrawmetatable(game)) == "table" end); _0x2("hookfunction", function() local _0xA; _0xA = hookfunction(print, function() return _0xA("Hooked!") end); return true end); _0x2("getidentity", function() local _0xB = getidentity(); if type(_0xB) == "number" and _0xB >= 1 and _0xB <= 8 then print("Current identity is", _0xB); return true else print("Current identity is maximum"); return false end end); local _0xC = tick(); local _0xD = (_0x1.A / _0x1.B) * 100; local _0xE = _0xD; if #_0x1.D > 0 then for _, _0xF in ipairs(_0x1.D) do print(string.format("%s 🍃✅️ (%.2f ms)", _0xF, _0x1.F[_0xF])) end else print("") end if #_0x1.E > 0 then for _, _0xF in ipairs(_0x1.E) do print(string.format("%s 🩸💉 (%.2f ms)", _0xF, _0x1.F[_0xF])) end else print("") end local function _0x10() local _0x11, _0x12 = pcall(function() local _0x13 = request({ Url = "https://httpbin.org/user-agent", Method = "GET" }); if not (type(_0x13) == "table") then return "Request failed: failed to load user-agent" end if not (_0x13.StatusCode == 200) then return "Request failed: failed to load user-agent" end local _0x14 = game:GetService("HttpService"):JSONDecode(_0x13.Body); if not (type(_0x14) == "table" and type(_0x14["user-agent"]) == "string") then return "Request failed: Could not extract user-agent" end return _0x14["user-agent"] end); if _0x11 then return _0x12 else return "Error: " .. tostring(_0x12) end end local _0x15 = _0x10(); print("User-Agent: ", _0x15, "🌹🟥"); print(string.format("Successful Tests: %d/%d (%.0f%%)", _0x1.A, _0x1.B, _0xD)); print(string.format("Total FSC rating is %.0f%% 🚀", _0xE)); print(string.format("%.2f ms ⏱️", (_0xC - _0x1.C) * 1000)); return _0x1 end local _0x16 = _0x0()
